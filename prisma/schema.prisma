// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//User
model User {
  id                   String                 @id @default(uuid())
  firstName            String?                @map("first_name")
  lastName             String?                @map("last_name")
  email                String                 @unique
  username             String                 @unique
  avatar               String?                @default("")
  password             String?
  country              String?
  mailVerified         Boolean                @default(false) @map("mail_verified")
  twoFactorAuth        Boolean                @default(false) @map("two_factor_auth")
  is42User             Boolean                @map("is_42_user")
  status               UserStatus
  logs                 Logs?
  Friendship           Friendship[]
  Game                 Game[]
  HaveAchievement      haveAchievement[]
  RoomChatConversation RoomChatConversation[]
  Sent                 Conversation[]         @relation("sender")
  Received             Conversation[]         @relation("receiver")
  SentNotif            Notification[]         @relation("sent")
  ReceivedNotif        Notification[]         @relation("received")

  @@map("user")
}

model Logs {
  id        String @id @default(uuid())
  victories Int
  defeats   Int
  level     Float
  rank      String
  User      User   @relation(fields: [userId], references: [id])
  userId    String @unique @map("user_id")

  @@map("logs")
}

//Friendship
model Friend {
  id         String       @id @default(uuid())
  username   String       @unique
  Friendship Friendship[]

  @@map("friend")
}

model Friendship {
  userId   String           @map("user_id")
  friendId String           @map("friend_id")
  state    FriendshipStatus

  user   User   @relation(fields: [userId], references: [id])
  friend Friend @relation(fields: [friendId], references: [id])

  @@id([userId, friendId])
  @@map("friendship")
}

//Game
model Opponent {
  id       String @id @default(uuid())
  username String @unique
  Game     Game[]

  @@map("opponent")
}

model Game {
  id         String @id @default(uuid())
  userId     String @map("user_id")
  opponentId String
  mode       Mode
  map        Map

  opponent Opponent @relation(fields: [opponentId], references: [id])
  user     User     @relation(fields: [userId], references: [id])
  History  History?

  @@map("game")
}

model History {
  id            String  @id @default(uuid())
  userScore     Int     @map("user_score")
  opponentScore Int     @map("opponent_score")
  accepted      Boolean
  userId        String  @map("user_id")
  opponentId    String  @map("opponent_id")

  Game   Game   @relation(fields: [gameId], references: [id])
  gameId String @unique

  @@map("history")
}

//Achievements
model Achievement {
  id              String            @id @default(uuid())
  name            String
  description     String
  HaveAchievement haveAchievement[]

  @@map("achievement")
}

model haveAchievement {
  id            String      @id @default(uuid())
  userId        String      @map("user_id")
  achievementId String      @map("achievement_id")
  level         Float
  User          User        @relation(fields: [userId], references: [id])
  Achiement     Achievement @relation(fields: [achievementId], references: [id])

  @@map("have_achievement")
}

//Chat
model RoomChat {
  id                   String                 @id @default(uuid())
  type                 RoomType
  password             String?
  RoomChatConversation RoomChatConversation[]

  @@map("room_chat")
}

model RoomChatConversation {
  id         String          @id @default(uuid())
  roomChatId String          @map("room_chat_id")
  userId     String          @map("user_id")
  userStatus UserStatusGroup @map("user_status")
  userRole   UserRole

  User     User      @relation(fields: [userId], references: [id])
  RoomChat RoomChat  @relation(fields: [roomChatId], references: [id])
  Message  Message[]

  @@map("room_chat_conversation")
}

model Message {
  id       String @id @default(uuid())
  message  String
  senderId String @map("sender_id")

  RoomChatConversation   RoomChatConversation @relation(fields: [roomChatConversationId], references: [id])
  roomChatConversationId String               @map("room_chat_conversation_id")
  Conversation           Conversation         @relation(fields: [conversationId], references: [id])
  conversationId         String               @map("conversation_id")

  @@map("message")
}

model Conversation {
  id         String @id @default(uuid())
  senderId   String @map("sender_id")
  receiverId String @map("reciever_id")

  Sender   User      @relation("sender", fields: [senderId], references: [id])
  Receiver User      @relation("receiver", fields: [receiverId], references: [id])
  Messages Message[]

  @@map("conversation")
}

//Notification 

model Notification {
  id        String    @id @default(uuid())
  notifType NotifType
  sender    User      @relation("sent", fields: [senderId], references: [id])
  receiver  User      @relation("received", fields: [receiverId], references: [id])

  senderId   String @map("sender_id")
  receiverId String @map("receiver_id")
}

//Types
enum UserStatus {
  ONLINE
  OFFLINE
  INGAME

  @@map("user_status")
}

enum UserStatusGroup {
  MUTED
  BANNED

  @@map("user_status_group")
}

enum RoomType {
  PUBLIC
  PRIVATE
  PROTECTED

  @@map("room_type")
}

enum UserRole {
  BASIC
  ADMIN

  @@map("user_role")
}

enum NotifType {
  MESSAGE
  GAME_REQUEST
  FRIEND_REQUEST

  @@map("notif_type")
}

enum FriendshipStatus {
  PENDING
  ACCEPTED
  REFUSED
  BLOCKED

  @@map("friendship_status")
}

enum Mode {
  ON_TIME
  DEFI

  @@map("mode")
}

enum Map {
  EASY
  MEDIUM
  HARD

  @@map("map")
}
